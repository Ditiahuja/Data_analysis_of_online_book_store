--create database onine book store
CREATE DATABASE online_book_store;

--create books table 
CREATE TABLE books(
	Book_ID	SERIAL	PRIMARY KEY,
	Title	VARCHAR(100)	NOT NULL,
	Author	VARCHAR(50)	NOT NULL,
	Genre	VARCHAR(50)	,
	Published_Year	INT	,
	Price	REAL	,
	Stock	INT	
);
--import data into books table either manually or using a query
SELECT * FROM books;

--create table customers
DROP TABLE IF EXISTS customers;
CREATE TABLE customers(
	Customer_ID	SERIAL	PRIMARY KEY,	
	Name	VARCHAR(100)	NOT NULL,	
	Email	VARCHAR(100)	UNIQUE,	
	Phone	BIGINT	,	
	City	VARCHAR(100)	,	
	Country	VARCHAR(100)		
);
--import data into customers table either manually or using queries
SELECT * FROM customers;

DROP TABLE IF EXISTS orders;
--create table orders
CREATE TABLE orders(
	Order_ID	SERIAL	PRIMARY KEY,
	Customer_ID	INT	REFERENCES customers(Customer_ID),--HERE refernces is a constraint
	Book_ID	INT	REFERENCES books(Book_ID) ,--foreign key
	Order_Date	DATE 	,
	Quantity	INT	,
	Total_Amount	REAL	
);
SELECT *FROM orders;
--BASIC QUERIES

--1. retrieve all the books from fiction genre 
SELECT * FROM books
WHERE Genre = 'Fiction';
--2 find books published aftert the year 1950
SELECT * FROM books
WHERE published_year>1950;
--3 retrieve all the customers from canada 
SELECT * FROM customers
WHERE country='Canada';
--4show orders  placed in november 2023
SELECT * FROM orders
WHERE order_date BETWEEN '2023-11-01' AND '2023-11-30';
--5 retrieve the total stocks of books available
--we cannot use aggregated terms like sum() along with the non aggregated columns.
--for this we have to use group by clause
SELECT SUM(Stock) AS total_stock
FROM books;
--6 find the details of the most expensive book
SELECT * FROM books 
WHERE Price=(SELECT MAX(price)FROM books);
--OR
SELECT * FROM books ORDER BY Price DESC LIMIT 1;
--7 show all the customers that ordered more than 1 quantity of book
SELECT *FROM orders
WHERE quantity>1;
--8 retrieve all the orders where the total amount exceeds $20
SELECT *FROM orders
WHERE total_amount>20;
--9list all the genres available in the books table
SELECT DISTINCT genre FROM books;
--10 find the book with the lowest stock
SELECT * FROM books
WHERE stock=(SELECT MIN(stock)FROM books);
--OR
SELECT * FROM books 
ORDER BY stock ASC;
--11calculate the total revenue generated by all the orders
SELECT SUM(total_amount) AS total_revenue
FROM orders;

--ADVANCED QUERIES
--12 Retrieve the total number of books sold for each genre
SELECT b.genre,SUM( o.quantity) AS total_books_sold
FROM books b
JOIN orders o
ON b.book_id=o.book_id
GROUP BY b.genre;
--13 find the average privce of the books in the fantasy genre
SELECT AVG(price) AS avg_price_fantasy
FROM books
WHERE genre='Fantasy';
--14 List the customers who have placed atleast two orders
SELECT c.customer_id,c.name,COUNT(o.order_id) AS total_count
FROM orders o
JOIN customers c
ON c.customer_id=o.customer_id
GROUP BY c.customer_id
HAVING COUNT(o.order_id)>=2
ORDER BY c.customer_id ASC;
--15 find the most frequently ordered book
SELECT b.Title ,b.book_id,COUNT(o.order_id) AS books_ordered
FROM orders o
JOIN books b
ON b.book_id=o.book_id
GROUP BY b.book_id
ORDER BY books_ordered DESC LIMIT 5;
--16select the top 3 most expensive books of genre fantasy
SELECT * FROM books 
WHERE genre='Fantasy'
ORDER BY price DESC LIMIT 3;
--17 retrive the total quantity of books sold by each author
SELECT b.author,SUM(o.quantity) AS books_sold
FROM books b
JOIN orders o
ON b.book_id=o.book_id
GROUP BY b.author;
--18 list the cities where customers who spent over $30 are located
SELECT c.city,o.total_amount
FROM customers c 
JOIN orders o
ON c.customer_id=o.customer_id
WHERE o.total_amount>30;
--19find the customer who spend the most on orders
SELECT c.name,SUM(o.total_amount) AS money_spent
FROM customers c 
JOIN orders o 
ON c.customer_id=o.customer_id
GROUP BY c.name
ORDER BY money_spent DESC LIMIT 1 ;
--20calculate the stock remaining after fulfilling all the orders 
SELECT b.book_id,b.title,b.stock,o.quantity AS ordered_quantity,b.stock-o.quantity AS remaining_stock
FROM orders o
JOIN books b
ON o.book_id=b.book_id
ORDER BY book_id ASC;